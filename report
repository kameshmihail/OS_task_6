Московский Авиационный Институт
(Национальный Исследовательский Университет)

Факультет информационных технологий и прикладной математики
Кафедра вычислительной математики и программирования


Лабораторная работ №2 по курсу
«Операционные системы»
	

Содержание
1.	Постановка задания
2.	Вариант задания
3.	Общие сведения о программе
4.	Общий метод и алгоритм решения
5.	Демонстрация работы программы
6. 	Выводы

Постановка задания
Реализовать распределенную систему по асинхронной обработке запросов. 
В данной распределенной системе должно существовать 2 вида узлов: «управляющий» и «вычислительный».
Необходимо объединить данные узлы в соответствии с той топологией, которая определена вариантом. 
Связь между узлами необходимо осуществить при помощи технологии очередей сообщений. 
Также в данной системе необходимо предусмотреть проверку доступности узлов в соответствии с вариантом. 


Вариант задания.
Топология 2 – список списков вычислительных узлов.
Тип задания вычислительных узлов 4 – поиск подстроки в строке.
Команда проверки 1 – ping all

Общие сведения о программе
Основной файл main содержит в себе списки текущих процессов, и пути доступа к ним, при создании он отправляет работникам сообщения о создании и наше мини дерево 
перестраивается в соответствии с конфигурацией. Внутри каждого работника есть два нода, которые хранят данные о пути выше или ниже от себя, для пересылки им сообщений. 
Все данное действо написано используя 0mq – библиотеку для С++, в которой возможна реализация передачи данных по TCP протоколу.


Общий метод и алгоритм решения.
Для реализации поставленной задачи необходимо:
1.	Класс сообщений, где есть методы отправки и принятия различных сообщений. 
2.	Класс работников содержит в себе параметры связи с сокетами, привязки к определенным портам, а также методы по перестройке или связи и отправке сообщений между собой. 
3.	Коллектор, он отвечает за асинхронность выполнения задач, собирая данные после их 
завершения по команде update.
Демонстрация работы программы.

create 20 -1
OK
create 21 20
OK
create 22 21
OK
create 23 22
OK
create 24 23
OK
create 25 24
OK
create 30 -1
OK
create 31 30
OK
create 32 31
OK
ping all
OK -1
delete 22
delete 31
ping all
OK 22 31
exec 21
adding task to 21
qweqwe
wewe
OK 1 4



Выводы
	Очень важно было добиться рационального использования сообщений, отправляя только то, что надо, я мог создать целую структуру для обработки и получения 
	сообщений, но в виду архитектуры передачи текста нефиксированной длинны, размер которой может быть неограничен, мне пришлось разбивать сообщения по классам,
	в зависимости от их использования, что затрудняло отладку, так как в случае ошибки ты не сможешь понять что у тебя находится в сокете пока процесс не прочитает
	его и не обработает, часто в таком случае – неправильно, сломав всю программу. 0mq – как заверяют разработчики очень быстрый способ передачи сообщений, так оно
	в принципе и есть, но более того, я начинал писать лабораторную на Си, где функции слегка отличаются, но функционал тот же, как же это просто, особенно на С++,
	никаких заморочек, все запускается в 3 строчки, работает гладко, главное понимать, что ты делаешь.
